---
description: Development templates and examples for common ImpactOS AI Agent tasks - testing, framework mapping, and API patterns
globs: ["src/**/*.py"]
alwaysApply: false
---

# Development Templates & Examples

## Test Case Template
When creating new test cases for `src/testing/test_cases.py`:

```python
TestCase(
    id="your_test_id",
    query="Natural language question",
    query_type="aggregation|descriptive|analytical",
    complexity="simple|medium|complex",
    expected_answer_keywords=["keyword1", "keyword2"],
    expected_sources=["file1.xlsx", "file2.csv"],
    expected_metrics={"metric_name": "expected_value"},
    expected_frameworks=["MAC", "SDG"],
    description="Clear description of what this test validates",
    min_response_quality=0.7
)
```

## Framework Mapping Template
When adding new framework mappings in `frameworks.py`:

```python
framework_mapping = {
    'framework_name': {
        'category_id': 'Human-readable description',
        'another_id': 'Another description'
    }
}
```

## Database Schema Extension
When extending the database schema in `schema.py`:

```sql
CREATE TABLE new_table (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    -- Add specific columns here
    FOREIGN KEY (reference_id) REFERENCES existing_table(id)
);
```

## Configuration Addition Template
When adding new configuration options in `config.py`:

```python
@dataclass
class NewFeatureConfig:
    """Configuration for new feature."""
    enabled: bool = True
    threshold: float = 0.5
    max_items: int = 100
    
    def validate(self) -> bool:
        """Validate configuration values."""
        return 0.0 <= self.threshold <= 1.0 and self.max_items > 0
```

## API Endpoint Pattern
For future API development:

```python
@app.route('/api/v1/resource', methods=['GET', 'POST'])
def handle_resource():
    """Handle resource requests with proper error handling."""
    try:
        # Validate input
        # Process request
        # Return structured response
        return jsonify({
            "status": "success",
            "data": result,
            "metadata": {"timestamp": datetime.utcnow()}
        })
    except Exception as e:
        logger.error(f"Error in handle_resource: {e}")
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500
```

## Performance Measurement Pattern
When adding performance tracking:

```python
with self.metrics_collector.time_operation('operation_name'):
    result = expensive_operation()
    self.metrics_collector.record_operation_result(len(result))
```

## Error Handling Pattern
Standard error handling for the project:

```python
try:
    result = risky_operation()
    logger.info(f"Operation completed successfully: {len(result)} items")
    return result
except SpecificException as e:
    logger.warning(f"Expected error in operation: {e}")
    return fallback_result()
except Exception as e:
    logger.error(f"Unexpected error in operation: {e}")
    raise ProcessingError(f"Operation failed: {e}") from e
```
